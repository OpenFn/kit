import test from 'ava';
import type { WorkflowStartPayload } from '@openfn/engine-multi';

import handleRunStart from '../../src/events/run-start';
import { mockChannel } from '../../src/mock/sockets';
import { createRunState } from '../../src/util';
import { RUN_LOG, RUN_START } from '../../src/events';

import pkg from '../../package.json' assert { type: 'json' };
import { timestamp } from '@openfn/logger';

test('should include a timestamp', async (t) => {
  const plan = {
    id: 'run-1',
    workflow: {
      steps: [{ id: 'job-1', expression: '.' }],
    },
    options: {},
  };

  const state = createRunState(plan);

  const channel = mockChannel({
    [RUN_LOG]: () => true,
    [RUN_START]: (evt) => {
      t.assert(typeof evt.timestamp === 'string');
      t.is(evt.timestamp.length, 16);
    },
  });

  const event: any = {
    time: timestamp(),
  };

  t.is(event.time.toString().length, 19);

  const context: any = { channel, state, onFinish: () => {} };
  await handleRunStart(context, event);
});

test('run:start event should include versions', async (t) => {
  const plan = {
    id: 'run-1',
    workflow: {
      steps: [{ id: 'job-1', expression: '.' }],
    },
    options: {},
  };
  const input = 'abc';
  const jobId = 'job-1';

  const versions = {
    node: process.version.substring(1),
    '@openfn/language-common': ['1.0.0'],
  };

  // Simulate an event that would be generated by the worker
  const event: WorkflowStartPayload = {
    workflowId: plan.id,
    // @ts-ignore
    versions,
  };

  const state = createRunState(plan, input);
  state.activeJob = jobId;
  state.activeStep = 'b';

  const channel = mockChannel({
    [RUN_START]: (evt) => {
      t.deepEqual(evt.versions, {
        ...versions,
        worker: pkg.version,
      });
      return true;
    },
    [RUN_LOG]: () => true,
  });

  await handleRunStart({ channel, state } as any, event);
});

test('run:start should log the version number', async (t) => {
  let logEvent: any;
  const plan = {
    id: 'run-1',
    workflow: {
      steps: [{ id: 'job-1', expression: '.' }],
    },
    options: {},
  };
  const input = 'abc';
  const jobId = 'job-1';

  const versions = {
    node: process.version.substring(1),
    engine: '1.0.0',
    compiler: '1.0.0',
    worker: pkg.version,
    '@openfn/language-common': ['1.0.0'],
  };

  // Simulate an event that would be generated by the worker
  const event: WorkflowStartPayload = {
    workflowId: plan.id,
    versions,
    time: BigInt(123),
  };

  const state = createRunState(plan, input);
  state.activeJob = jobId;
  state.activeStep = 'b';

  const channel = mockChannel({
    [RUN_START]: () => true,
    [RUN_LOG]: (evt) => {
      if (evt.source === 'VER') {
        logEvent = evt;
      }
      return true;
    },
  });

  await handleRunStart({ channel, state } as any, event);

  t.truthy(logEvent);
  t.is(logEvent.level, 'info');
  const [message] = logEvent.message;
  t.log(message);
  // This just a light test of the string to make sure it's here
  // It uses src/util/versions, which is tested elsewhere
  t.regex(message, /(node\.js).+(worker).+(@openfn\/language-common)/is);
});
